name: Continuous Integration [Terraform]

on:
  pull_request:
    paths:
    - terraform/**

jobs:
  ci-terraform:
    name: Continuous Integration [Terraform]
    runs-on: ubuntu-latest
    env:
      tf_actions_working_dir: terraform

    defaults:
      run:
        shell: bash
        working-directory: ${{ env.tf_actions_working_dir }}

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Import Secrets
      id: import_secrets
      uses: hashicorp/vault-action@v2.4.1
      with:
        url: https://vault.basedosdados.org
        token: ${{ secrets.VAULT_TOKEN }}
        secrets: |
          secret/data/terraform_credentials/basedosdados-dev  GCP_SA                                   | TF_VAR_GCP_SA ;
          secret/data/ckan_credentials                        TF_VAR_sql_ckan_production_user_password | TF_VAR_sql_ckan_production_user_password ;
          secret/data/ckan_credentials                        TF_VAR_sql_ckan_staging_user_password    | TF_VAR_sql_ckan_staging_user_password ;
          secret/data/id_server_credentials/basedosdados      TF_VAR_sql_id_server_user_password       | TF_VAR_sql_id_server_user_password ;
          secret/data/metabase_credentials/basedosdados       TF_VAR_sql_metabase_user_password        | TF_VAR_sql_metabase_user_password ;
          secret/data/prefect_credentials/basedosdados        TF_VAR_sql_prefect_user_password         | TF_VAR_sql_prefect_user_password

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.1.9

    - name: Terraform Init
      id: init
      run: terraform init
      env:
        GOOGLE_CREDENTIALS: ${{ steps.import_secrets.outputs.TF_VAR_GCP_SA }}

    - name: Terraform Format
      id: fmt
      run: terraform fmt -check

    - name: Terraform Validate
      id: validate
      run: terraform validate -no-color

    - name: Terraform Plan
      id: plan
      run: terraform plan -no-color
      env:
        GOOGLE_CREDENTIALS: ${{ steps.import_secrets.outputs.TF_VAR_GCP_SA }}
        TF_VAR_sql_ckan_production: ${{ steps.import_secrets.outputs.TF_VAR_sql_ckan_production }}
        TF_VAR_sql_ckan_staging: ${{ steps.import_secrets.outputs.TF_VAR_sql_ckan_staging }}
        TF_VAR_sql_id_server: ${{ steps.import_secrets.outputs.TF_VAR_sql_id_server }}
        TF_VAR_sql_metabase: ${{ steps.import_secrets.outputs.TF_VAR_sql_metabase }}
        TF_VAR_sql_prefect: ${{ steps.import_secrets.outputs.TF_VAR_sql_prefect }}

    - uses: actions/github-script@v6
      if: github.event_name == 'pull_request'
      env:
        PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          // 1. Retrieve existing bot comments for the PR
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          })
          const botComment = comments.find(comment => {
            return comment.user.type === 'Bot' && comment.body.includes('Terraform Format and Style')
          })

          // 2. Prepare format of the comment
          const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
          #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
          #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
          <details><summary>Validation Output</summary>

          \`\`\`\n
          ${{ steps.validate.outputs.stdout }}
          \`\`\`

          </details>

          #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

          <details><summary>Show Plan</summary>

          \`\`\`\n
          ${process.env.PLAN}
          \`\`\`

          </details>

          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;

          // 3. If we have a comment, update it, otherwise create a new one
          if (botComment) {
            github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: output
            })


          } else {
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
          }
